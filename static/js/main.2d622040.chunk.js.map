{"version":3,"sources":["redux/reducers.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","components/error/error-boundary.component.jsx","containers/App.js","redux/actions.js","redux/constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","Fragment","type","placeholder","onChange","ErrorBoundary","props","state","hasError","info","this","setState","children","React","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2d622040.chunk.js","sourcesContent":["import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return(\r\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='user' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p className='ttl'>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card \r\n              key={i}\r\n              id={robots[i].id} \r\n              name = {robots[i].name} \r\n              email={robots[i].email}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <input \r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='search' \r\n          placeholder='Search Robots' \r\n          onChange={searchChange}/>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/card-list/card-list.component';\r\nimport SearchBox from '../components/searchbox/searchbox.component';\r\nimport Scroll from '../components/scroll/scroll.component';\r\nimport ErrorBoundary from '../components/error/error-boundary.component';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../redux/actions';\r\n\r\n\r\nclass App extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?        \r\n            <div className='tc'>\r\n                <h1>Loading</h1>\r\n            </div>\r\n        :\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots} />\r\n                </ErrorBoundary>\r\n            </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { \r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots(dispatch))\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps\r\n)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n  }","\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// React Redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; // to create root state\n\nimport { searchRobots, requestRobots } from './redux/reducers';\n\nimport { createLogger } from 'redux-logger';\n\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}